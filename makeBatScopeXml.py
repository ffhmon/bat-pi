#!/usr/lib/python3.2

# Script for Raspberry Bat Pi v1 (first edition). See http://www.bat-pi.eu for more information.
# Creates XML meta data files, allowing the Bat Pi recordings to be transferred to BatScope analyser software. See http://www.batscope.ch/ 

# What this script does:
# - it reads current Bat Pi device settings from /out/bin/recordings.sh
# - it reads GPS track points from /out/data/gps (gpx-file or an alternative 'fixed-geo.txt') and geo references all recordings
# - it reads logged temperatures from a /out/ENVLOG.TXT file for each recording
# - it writes an XML file for each wav recording with device settings, GPS data and temperatures into /out/data/batscope/ 
# - it writes a session KML file with georeferenced recordings into /out/data/reports/pi-route.kml for use with GIS software
# - it writes a session XML and CSV with archived device settings for the current session into /out/data/reports/pi-session.xml and pi-session.csv

# Note, that a special ImporterModule for BatScope is needed. 
# Look for the Bat-Pi v1 Importer at https://github.com/ffhmon/bat-project

# Author: Fred Van Gestel - ffhmonitor@gmail.com
# Tested under Linux Mint 17.3 Rosa and Mac OS X 10.7.5

# This file on GitHub: https://github.com/ffhmon/bat-project/blob/master/makeBatScopeXml.py
# Licence: GNU General Public Licence v3

# Script Version 1.0 - January 6, 2017

#----------------------------------------------------------------------------------
def parseWavFileDateTime(wavFileName):
        returnValue = 0
        try:
                theYear = int(wavFileName[10:14])
                theMonth = int(wavFileName[14:16])
                theDay = int(wavFileName[16:18])
                theHour = int(wavFileName[19:21])
                theMinute = int(wavFileName[21:23])
                theSecond = int(wavFileName[23:25])
                theDateTime = datetime.datetime(theYear, theMonth, theDay, theHour, theMinute, theSecond)
                
                returnValue = dict(wavYear=theYear, wavMonth=theMonth, wavDay=theDay, \
                    wavHour=theHour, wavMinute=theMinute, wavSecond = theSecond, \
                    wavDateTime=theDateTime)

        except:
                print('Error parsing date time values from wav file name.')
                
        return returnValue
        		
#----------------------------------------------------------------------------------
def getWavFileTemperature(wavFile, envLogFile, timeSavingCorrection):

    # takes the date time from a wav file name and finds a corresponding temperature from an environment log
    # the log file can be generated by the Bat Pi itselves or by a separate Arduino device using DHT11 or DHT22 sensors
    # we expect one data line every 10 minutes with temperature T and humidity H values
    # data format: D.M.Y;H:MM;T;H 
    
    # if no valid temperature can be found, we use -1000 degrees Celsius
    tempTemperature = -1000

    try:
    		
        currentWav = os.path.basename(wavFile)
        wavFileDateElements = parseWavFileDateTime(currentWav)
        
        #wavDateTime = wavDateTime - datetime.timedelta(hours=timeSavingCorrection)

        # get temperature from environment file
        if os.path.exists(environmentFile):
            with open (environmentFile) as tempFile:
                for t, tline in enumerate(tempFile):
                    pos1=tline.find('.')
                    tempDay=tline[0:pos1]
                    
                    pos2=tline.find('.',pos1+1)
                    tempMonth=tline[pos1+1:pos2]

                    pos3=tline.find(';')
                    tempYear=tline[pos2+1:pos3]

                    pos4=tline.find(':',pos3)
                    tempHour=tline[pos3+1:pos4]

                    pos5=tline.find(';',pos4)
                    tempMinute=tline[pos4+1:pos5]                
                    if int(tempMinute) == 50:
                        tempMinute="59"

                    tempDateTime=datetime.datetime(int(tempYear), int(tempMonth), int(tempDay), int(tempHour), int(tempMinute), 0)
                    tempDateTime= tempDateTime - datetime.timedelta(hours=utcTimeCorrection)
                    if int(tempDay) == wavFileDateElements['wavDay']:                    
                        if int(tempMonth) == wavFileDateElements['wavMonth']:           
                            if int(tempYear) == wavFileDateElements['wavYear']:
                                if int(tempHour) == wavFileDateElements['wavHour']:
                                    if int(tempMinute) >= wavFileDateElements['wavMinute']:
                                        pos6=tline.find(';',pos5)
                                        pos7=tline.find(';',pos6+1)
                                        tempTemperature=tline[pos6+1:pos7]                                      
                                        break;
                                    
        theTemperature = round(float(tempTemperature))
                                            
    except:
        print('Error parsing temperature.')
        e = sys.exc_info()
        print(e)
        theTemperature = float(-1000)

    return theTemperature

#----------------------------------------------------------------------------------
def writeBatScopeXml(batScopeXml, fileName, recDeviceName, recDate, recLocationDevice, GPSValid, \
                                                 GPSLat, GPSLong, GPSAlt, GPSHdop, GPSSats, Temperature, \
                                                 recDeviceID, recDeviceFirmware, \
                                                 recDeviceStartFrequency, recDevicePreTrigger, recDevicePostTrigger):        
        returnValue = 0
        try:
                fXml = open(batScopeXml, 'w')
                fXml.write("<BatScopeRecord>\n")
                fXml.write("   <FileName>" + fileName + "</FileName>\n")
                fXml.write("   <BatRecDeviceName>" + recDeviceName + "</BatRecDeviceName>\n")
                fXml.write("   <BatRecDate>"  + recDate + "</BatRecDate>\n")
                fXml.write("   <BatRecSpeed>1</BatRecSpeed>\n")   
                fXml.write("   <BatRecLocationDevice>" + recLocationDevice + "</BatRecLocationDevice>\n")   
                fXml.write("   <BatRecGPSValid>" + GPSValid + "</BatRecGPSValid>\n")
                fXml.write("   <BatRecGPSLat>" + GPSLat + "</BatRecGPSLat>\n")
                fXml.write("   <BatRecGPSLong>" + GPSLong + "</BatRecGPSLong>\n")
                fXml.write("   <BatRecGPSAltitude>" + GPSAlt + "</BatRecGPSAltitude>\n")
                fXml.write("   <BatRecGPSHDOP>" + GPSHdop + "</BatRecGPSHDOP>\n")
                fXml.write("   <BatRecGPSSatsUsed>" + GPSSats + "</BatRecGPSSatsUsed>\n")
                fXml.write("   <BatRecTemperature>" + Temperature + "</BatRecTemperature>\n")
                fXml.write("   <BatRecDeviceID>"  + recDeviceID +  "</BatRecDeviceID>\n")
                fXml.write("   <BatRecDeviceFirmware>" + recDeviceFirmware + "</BatRecDeviceFirmware>\n") 
                fXml.write("   <BatRecTriggerCutOffFreqEff>" + recDeviceStartFrequency + "</BatRecTriggerCutOffFreqEff>\n")
                fXml.write("   <BatRecPreTriggerTime>" + recDevicePreTrigger + "</BatRecPreTriggerTime>\n")
                fXml.write("   <BatRecPostTriggerTime>" + recDevicePostTrigger + "</BatRecPostTriggerTime>\n")    
                fXml.write("</BatScopeRecord>\n")
                fXml.close()
                returnValue = 1
        except:
                print('Error writing metadate into BatScopeXml file.')

        return returnValue

# ==================================================================================================================
# Main program
# ==================================================================================================================

import datetime, glob, linecache, os, sys

# default variables - can be changed by sys.argv ###

# default base path for all data and bin files
# basePath = "/home/fred/projekte/batpi/raw/20160709-tr1/"
basePath = os.getcwd() + '/'

# default UTC time correction in hours for time stamp calculations.
# For Germany, set to 1 for bat sounds recorded during winter time, use 2 for sounds recorded during summer
utcTimeCorrection = 2           

### parse command line args if any
try:    
    args = (len(sys.argv))
    if args > 1:    # user passed a base path
        candidatePath = sys.argv[1]
        if not os.path.exists(candidatePath):
            # maybe user just entered a new sub dir
            if not os.path.exists(basePath + candidatePath):
                print ("Given base path not found. Trying default path.")
            else:
                basePath = basePath + candidatePath + "/"
        else:
            basePath = candidatePath + "/"

    if args > 2:    # user passed UTC time correction
        candidateTimeCorrection = int(sys.argv[2])
        if candidateTimeCorrection >=0:
            utcTimeCorrection = candidateTimeCorrection                
except:        
    print("Invalid command argument. Usage: makeBatScopeXml.py <base path> <UTC time correction>")
    sys.exit()
    
print ("Using base path: " + basePath)
print ("Using time correction: " + str(utcTimeCorrection))
print('----------------------------------------------------------------')

try:
    # set input directories 
    piRawDataPath = basePath + "out/data/"
    piBinPath  = basePath + "out/bin/"
    piGpsPath  = basePath + "out/data/gps/"

    # set output directories
    reportsPath = basePath + "reports/"
    batScopePath = piRawDataPath + "batscope/"

    # paths for the input files
    wavFiles = glob.glob(piRawDataPath + "*.wav")
    gpxFiles = glob.glob(piGpsPath + "*.gpx")
    settingsFile = piBinPath + "recordings.sh"
    environmentFile = basePath + "ENVLOG.TXT"

    # see if all paths exist
    if not os.path.exists(piRawDataPath):
        print('Sorry, can not find the Bat-Pi raw data input directory:')
        print(piRawDataPath)
        print('Hint: you can pass a valid base path by calling ')
        print (sys.argv[0] +  " <new/base/path>")
        sys.exit()
        
    if not os.path.exists(piGpsPath):
        print('Can not find the Bat-Pi GPS directory. Check path and try again.')
        sys.exit()

    if not os.path.exists(piBinPath):
        print('Can not find Bat-Pi bin directory. Check path and try again.')
        sys.exit()
except:
    print("Error accessing Bat-Pi files.")
    sys.exit()

print ("Bat Pi device settings")
print('----------------------------------------------------------------')

try:
    # get current Bat Pi parameters
    with open(settingsFile) as batPi:
        for i, line in enumerate(batPi):        
            if 'export' in line:
                if 'pauseVorherSec' in line:
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)                
                    preTrigger = int(float(line[pos1+1:pos2])*1000)
                if 'pauseNachherSec' in line:
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)  
                    postTrigger = int(float(line[pos1+1:pos2])*1000)
                if 'schwelleVorher' in line:
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)  
                    startTreshold = line[pos1+1:pos2 -1]
                if 'schwelleNachher' in line:
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)  
                    stopTreshold = line[pos1+1:pos2-1]
                if 'PRIORITY' in line:
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)  
                    priority = line[pos1+1:pos2]
                if 'BUFFER' in line:
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)  
                    recbuffer = line[pos1+1:pos2]
            if 'nice' in line:
                volume = line[72:73]
                startFrequency = int(line[79:81])*1000
                recordLength = line[169:170]
            if 'Project 2014' in line:
                    deviceName = 'BatPi-v1'     # first Bat-Pi generation
                    deviceFirmware = '1510'     # ROM released in Octobre 2015
            if 'USBDEVICE_MIC_ID_PREFIX=' in line:
                    micVersion = ''
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)  
                    usbDevice = line[pos1+1:pos2]
                    if usbDevice == '0869':
                            micVersion = 'Dodotronic 250'
                            deviceName = deviceName + '-Dodo250'
                                                            

    # inform user
    print('Device name     : ' + deviceName)
    print('Device firmware : ' + str(deviceFirmware))
    print('Mic Version     : ' + str(micVersion))
    print('Pretrigger      : ' + str(preTrigger) + ' msec')
    print('Posttrigger     : ' + str(postTrigger) + ' msec')
    print('Treshold start  : ' + startTreshold + ' %')
    print('Treshold stop   : ' + stopTreshold+ ' %')
    print('Start frequency : ' + str(startFrequency) + ' Hz') 
    print('Record length   : ' + recordLength + ' sec')
    print('Record volume   : ' + volume) 
    print('Record priority : ' + priority) 
    print('Record buffer   : ' + recbuffer) 
except:
    print("Error reading Bat Pi settings.")
    sys.exit()
    
print('----------------------------------------------------------------')

try:
    # see if there are valid recordings (wav file is bigger as 1000 bytes)
    wavNumber=0
    validWavFiles = list()
    for index, item in enumerate(wavFiles):
        with open(wavFiles[index]) as wav:
            wav.seek(0, os.SEEK_END)
            wavSize=wav.tell()
            if wavSize > 1000:
                if "-N-" in wavFiles[index]:
                    validWavFiles.append(item)
                    wavNumber=wavNumber+1               
    print (str(wavNumber) + ' valid wav files.')

    # see if there are GPS data logged (gpx file is bigger as 398 bytes)
    gpxNumber=0
    validGpxFiles = list()
    for index, item in enumerate(gpxFiles):
        with open(gpxFiles[index]) as gpx:
            gpx.seek(0, os.SEEK_END)
            gpxSize=gpx.tell()
            if gpxSize > 398:
                points=list()            
                validGpxFiles.append(item)
                gpxNumber=gpxNumber+1
    print (str(gpxNumber) + ' valid gpx files.')

    # use a simple txt file with fixed geo-reference when it is present
    fixedGeoFile = piGpsPath + "fixed-geo.txt"
    fixedGeo = 0
    if os.path.exists(fixedGeoFile):
        fixedGeo = 1
        # read the fixed-geo.txt file
        with open(fixedGeoFile) as geoFile:
            for i, line in enumerate(geoFile):
                if 'latitude' in line:
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)
                    fixedLat=line[pos1+1:pos2]
                if 'longitude' in line:
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)
                    fixedLong=line[pos1+1:pos2]
                if 'altitude' in line:
                    pos1=line.find('"')
                    pos2=line.find('"',pos1+1)
                    fixedAltitude=line[pos1+1:pos2]
        
        # inform user 
        print('Fixed latitude  : ' + fixedLat)
        print('Fixed longitude : ' + fixedLong)
        print('Fixed altitude  : ' + fixedAltitude)

    # see if there is a temperature log
    if not os.path.exists(environmentFile):
        print('No ENVLOG.TXT found. Using default temperature of -1000 C.')
    else:
        print('ENVLOG.TXT found.')
except:
    print("Error reading Bat Pi *.wav or GPS data.")
    sys.exit()

try:
    # if no recordings found, there is nothing to do
    if wavNumber==0:
        print('Sorry, no recordings found. Nothing to do here. Bye now.')
        sys.exit()

    # create output directoriea if not exist
    if not os.path.exists(reportsPath):
        os.makedirs(reportsPath)
    if not os.path.exists(batScopePath):
        os.makedirs(batScopePath)
except:
    print("Unexpected error creating output directories.")
    sys.exit()
    
print('----------------------------------------------------------------')

print('Start georeferencing. This may take some time. Please hang on...')
print('================================================================')

notReferenced = list()
referenced = list()
skippedFiles = 0
processedFiles = 0
processedFixedFiles = 0

validWavFiles.sort()
try:
        for wavFile in validWavFiles:

            theTemperature = getWavFileTemperature(wavFile, environmentFile, utcTimeCorrection)
            
            currentWav = os.path.basename(wavFile)
            wavFileDateElements = parseWavFileDateTime(currentWav)
            
            print (currentWav + ": " + str(theTemperature) + " degrees C, now processing...")
            locationDevice = 'gps'
            gpsValid = 'never'
            
            if fixedGeo == 1:
                    lat = fixedLat
                    long = fixedLong
                    altitude = fixedAltitude
                    gpsValid = 'old'
                    hdop = '0'
                    sats = '0'                    
                    found = 1
                    processedFixedFiles = processedFixedFiles+1
            else:        

                theWavDateTime = wavFileDateElements['wavDateTime'] - datetime.timedelta(hours=utcTimeCorrection)

                wavTimeUpper = theWavDateTime + datetime.timedelta(seconds=5)
                wavTimeLower = theWavDateTime - datetime.timedelta(seconds=5)
            
                wavDate = str(wavFileDateElements['wavYear']) + str(wavFileDateElements['wavMonth']) + str(wavFileDateElements['wavDay'])
                wavTime = str(wavFileDateElements['wavHour']) + str(wavFileDateElements['wavMinute']) + str(wavFileDateElements['wavSecond'])
            
                found = 0
                            
                for currentGpx in validGpxFiles:
                        
                    with open (currentGpx) as gpxf:
                        points=list()
                        for i, line in enumerate(gpxf):
                            if '<trkpt' in line:
                                points.append(i+1)
                    for index, pitem in enumerate(points):

                        trackpoint=linecache.getline(currentGpx,pitem)
                        elevation=linecache.getline(currentGpx,pitem+1)
                        timestamp=linecache.getline(currentGpx,pitem+2)
                        satstring=linecache.getline(currentGpx,pitem+5)
                        hdopString=linecache.getline(currentGpx,pitem+6)

                        if '<time>' in timestamp:
                            if '</time>' in timestamp:
                                yearString=timestamp[10:14]
                                monthString=timestamp[15:17]
                                dayString=timestamp[18:20]
                                hourString=timestamp[21:23]
                                minuteString=timestamp[24:26]
                                secondString=timestamp[27:29]

                                pointDateTime=datetime.datetime(int(yearString), int(monthString), int(dayString), int(hourString), int(minuteString), int(secondString))

                                if pointDateTime<wavTimeUpper and pointDateTime>wavTimeLower:
                  
                                        lat = trackpoint[15:24]
                                        long = trackpoint[31:39]
                                        altitude = elevation[9:19]
                                        hdop = hdopString[10:13]
                                        sats = satstring[9:10]
                                        gpsValid = 'yes'                                        

                                        processedFiles=processedFiles+1
                                        referenced.append([currentWav,lat,long,altitude])                                        
                                
                                        found = 1                        
                                        break
                                
            if found==0:
                skippedFiles = skippedFiles + 1
                notReferenced.append(currentWav)
                lat = '0'
                long = '0'
                altitude = '0'
                hdop = '0'
                sats = '0'                

            #write metadata to a xml file for each recording
            fileName, fileExtension=os.path.splitext(currentWav)
            currentXml = batScopePath + fileName + '.xml'                                

            writeBatScopeXml(currentXml, currentWav, deviceName, currentWav[10:18] + currentWav[19:25], locationDevice, gpsValid, \
                    lat, long, altitude, hdop, sats, str(theTemperature), \
                    currentWav[0:7], deviceFirmware, \
                    str(startFrequency), str(preTrigger), str(postTrigger))
                        
except:
        print('Error georeferencing recording files.')

print('----------------------------------------------------------------')
print(str(processedFixedFiles) + ' wav files georeferenced using FIXED coordinates. ')
print(str(processedFiles) + ' wav files georeferenced using GPX data. ')
print(str(skippedFiles) + ' wav files could NOT be georeferenced: ')
print('----------------------------------------------------------------')

if skippedFiles > 0:
        print('Files without geo reference: ')
        for skipped in notReferenced:
            print(skipped)
        print('----------------------------------------------------------------')

wavDateTime = wavFileDateElements['wavDateTime']

# now build a kml file from mulidimensional array with referenced files
try:
        if gpxNumber!=0:
            if fileName != "":
                currentKml = reportsPath + 'pi-route.kml'

                fKml = open(currentKml, 'w')
                fKml.write("<?xml version='1.0' encoding='UTF-8'?>\n")
                fKml.write("<kml>\n")        
                fKml.write("<Document>\n")
                fKml.write("    <name>" + currentKml +"</name>\n")
                for geoPoint in referenced:
                    fKml.write("   <Placemark>\n")
                    fKml.write("       <name>" + geoPoint[0] + "</name>\n")
                    fKml.write("       <description>" + str(wavDateTime) +  "</description>\n")
                    fKml.write("       <Point>\n")
                    fKml.write("           <coordinates>" + geoPoint[2] + "," + geoPoint[1] + "," + geoPoint[3] + "</coordinates>\n")
                    fKml.write("       </Point>\n")
                    fKml.write("   </Placemark>\n")
                fKml.write("</Document>\n")
                fKml.write("</kml>\n")
                fKml.close()
                print("KML file: " + currentKml)
                print('----------------------------------------------------------------')
except:
        print('Error building pi-route.kml file.')
        
# summarize and archive pi settings for this export session
try:
        fPiXml = open(reportsPath + 'pi-session.xml', 'w')
        fPiXml.write("<PiSession>\n")
        fPiXml.write("   <BatPiDevice>" + currentWav[0:7] + "</BatPiDevice>\n")
        fPiXml.write("   <DateTime>" + str(wavDateTime) + "</DateTime>\n")
        fPiXml.write("   <Recordings>" + str(processedFiles) + "</Recordings>\n")
        fPiXml.write("   <FixedGeoPosition>" + str(fixedGeo) + "</FixedGeoPosition>\n")
        fPiXml.write("   <PreTrigger>" + str(preTrigger) + " msec</PreTrigger>\n")
        fPiXml.write("   <PostTrigger>" + str(postTrigger) + " msec</PostTrigger>\n")
        fPiXml.write("   <StartTreshold>" + startTreshold + " %</StartTreshold>\n")
        fPiXml.write("   <StopTreshold>" + stopTreshold + " %</StopTreshold>\n")
        fPiXml.write("   <StartFrequency>" + str(startFrequency) + " Hz</StartFrequency>\n")
        fPiXml.write("   <RecordLength>" + recordLength + " sec</RecordLength>\n")
        fPiXml.write("   <RecordVolumeLevel>" + volume + "</RecordVolumeLevel>\n")
        fPiXml.write("   <RecordPriority>" + priority + "</RecordPriority>\n")
        fPiXml.write("   <RecordBuffer>" + recbuffer + "</RecordBuffer>\n")
        fPiXml.write("</PiSession>\n")
        fPiXml.close()
except:
        print('Error writing pi-session.xml file.')

# create csv file with same data
try:
        outputCsv = reportsPath + 'pi-session.csv'
        fCsv = open(outputCsv, 'w')
        fCsv.write("DateTime;BatPiDevice;Recordings;FixedGeoPosition;PreTrigger;PostTrigger;StartTreshold;StopTreshold;StartFrequency;RecordLength;RecordVolumeLevel;RecordPriority;RecordBuffer\n")
        fCsv.write(str(wavDateTime) + ";" + currentWav[0:7] + ";" + str(processedFiles) + ";" + str(fixedGeo) + ";" + str(preTrigger) + ";" + str(postTrigger) + ";" + startTreshold + ";" + stopTreshold + ";" + str(startFrequency) + ";" + recordLength + ";" + volume + ";" + priority + ";" + recbuffer + "\n")
        fCsv.close()
except:
        print('Error writing pi-session.csv file.')

print('Pi settings for this export archived in : ')
print(reportsPath + 'pi-session.xml')
print('----------------------------------------------------------------')
print('All done. Bye now.')
